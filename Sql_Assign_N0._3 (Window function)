Que 1: Rank the customers based on the total amount they've spent on rentals?
Ans:    SELECT
          customer_id,
          SUM(amount) OVER (partition by customer_id)  AS total_spent ,
          RANK() OVER (ORDER BY customer_id desc ) AS spending_rank 
        FROM payment ; 

Que 2: Calculate the cumulative revenue generated by each film over time?
Ans:    select f.film_id, f.title, 
        sum(p.amount) over(partition by film_id) from film f
          left join inventory i on i.film_id = f.film_id
          left join rental r on r.inventory_id = i.inventory_id
          left join payment p on p.rental_id = r.rental_id
        order by title;

Que 3: Determine the average rental duration for each film, considering films with similar lengths?
 Ans:   select film_id, length,
        avg(rental_duration) over(partition by film_id ) as avg_rental
        from film order by length;

Que 4: Identify the top 3 films in each category based on their rental counts?
 Ans:  WITH RankedFilms AS (
            SELECT
                fC.FILM_ID,
                c.name,
                COUNT(r.rental_id) AS RENTAL_COUNTS,
                ROW_NUMBER() OVER (PARTITION BY c.NAME ORDER BY COUNT(R.RENTAL_ID))AS RANKING
            FROM
                CATEGORY C
            JOIN FILM_CATEGORY FC ON FC.CATEGORY_ID = C.CATEGORY_ID
            JOIN INVENTORY I ON I.FILM_ID = FC.FILM_ID
            JOIN RENTAL R ON R.INVENTORY_ID = I.INVENTORY_ID
            GROUP BY
                fC.FILM_ID,
                C.NAME
        )
        SELECT
        FILM_ID,
           NAME,
        rental_counts,RANKING
        FROM
            RankedFilms
        WHERE
            RANKING <= 3;
    
Que 5: Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customer?
    
Ans:   WITH CustomerRentals AS (
          SELECT
              customer_id,
              COUNT(rental_id) AS total_rentals,
              AVG(COUNT(rental_id)) OVER () AS average_rentals
          FROM
              rental
          GROUP BY
              customer_id
      )
      SELECT
          customer_id,
          total_rentals,
          average_rentals,
          total_rentals - average_rentals AS rental_difference
      FROM
          CustomerRentals;
    
Que 6 Find the monthly revenue trend for the entire rental store over time?

Ans:   WITH MonthlyRevenue AS (
          SELECT
              DATE_FORMAT(PAYMENT_DATE, '%Y-%M') AS MONTH,
              SUM(amount) AS TOTAL_revenue
          FROM
              PAYMENT P
      	GROUP BY
      		DATE_FORMAT(PAYMENT_DATE, '%Y-%M')
          ORDER BY
      		DATE_FORMAT(PAYMENT_DATE, '%Y-%M')
      	
      ),
      CumulativeRevenue AS (
          SELECT
              month,
              TOTAL_revenue,
              SUM(TOTAL_revenue) OVER (ORDER BY month) AS cumulative_revenue
          FROM
              MonthlyRevenue
      )
      SELECT
          month,
          TOTAL_revenue,
          cumulative_revenue
      FROM
          CumulativeRevenue;

QUE 7: *Identify the customers whose total spending on rentals falls within the top 20% of all customers?
Ans:   WITH RANKED_CUSTOMER AS (
        SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, SUM(P.AMOUNT) AS TOTAL_AMT_SPENT,
        	PERCENT_RANK() OVER(ORDER BY SUM(P.AMOUNT)DESC) AS PCT_RANK
        FROM CUSTOMER C 
        JOIN PAYMENT P ON P.CUSTOMER_ID = C.CUSTOMER_ID GROUP BY CUSTOMER_ID)
        SELECT 
        	CUSTOMER_ID, FIRST_NAME, LAST_NAME, TOTAL_AMT_SPENT, PCT_RANK 
              FROM
          		RANKED_CUSTOMER WHERE PCT_RANK <= 0.2;

Que 8: Calculate the running total of rentals per category, ordered by rental count?
Ans:  Select c.name, c.category_id, count(r.rental_id) as rental_count,
      sum(count(r.rental_id)) over(partition by c.name) as running_total
      from category c
      join film_category fc on fc.category_id = c.category_id
      join inventory i on i.film_id = fc.film_id
      join rental r on r.inventory_id = i.inventory_id
      join film f on f.film_id = i.film_id
      group by c.name, category_id
      order by count(r.rental_id) Desc;

Que 9: Find the films that have been rented less than the average rental count for their respective categories?
Ans:   WITH ABC as (
              			select c.name, f.title, count(r.rental_id) as rental_count,
              			avg(count(r.rental_id)) over(partition by c.name) as Average_count
              			from category c
              			join film_category fc on fc.category_id = c.category_id
              			join inventory i on i.film_id = fc.film_id
              			join rental r on r.inventory_id = i.inventory_id
              			join film f on f.film_id = i.film_id
              			group by c.name, f.title
                          )
              SELECT  name,
              		title,
              		rental_count,
                      Average_count
              FROM ABC
              where Average_count < rental_count;

Que 10: Identify the top 5 months with the highest revenue and display the revenue generated in each month?

Ans:    WITH ranked_months AS (
            SELECT 
                month(payment_date) as Month_revenue,
                amount,
                RANK() OVER (ORDER BY amount DESC) AS revenue_rank
            FROM payment
        )
        SELECT 
            month_revenue,
            Amount
        FROM ranked_months
        WHERE revenue_rank <= 5;




